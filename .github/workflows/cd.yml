name: Continuous Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'classifier.py'
      - 'data_generator.py'
      - 'evaluator.py'
      - 'main.py'
  workflow_dispatch:  # Allow manual triggering

jobs:
  train-model:
    name: Train Model
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Train model
        run: |
          # For demonstration - in reality, would run with proper dataset
          # and configuration
          python main.py --config config/vessel_classification.yaml
          
      - name: Archive model artifacts
        uses: actions/upload-artifact@v3
        with:
          name: trained-model
          path: |
            vessel_classification_results/
            evaluation_results/

  deploy-model:
    name: Deploy Model
    runs-on: ubuntu-latest
    needs: train-model
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Download model artifacts
        uses: actions/download-artifact@v3
        with:
          name: trained-model
          path: artifacts
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install deployment dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tensorflow boto3
          
      - name: Prepare model for deployment
        run: |
          # Script to convert and optimize model for production
          python utils/prepare_deployment.py --input artifacts/vessel_classification_results/best_model.keras --output deployment/model
          
      - name: Deploy model
        run: |
          # This would deploy the model to your production environment
          # For example, upload to S3, Cloud Storage, or a model registry
          python utils/deploy_model.py --model deployment/model --environment production
          
      - name: Send deployment notification
        run: |
          python utils/notification.py --event "model_deployed" --version ${{ github.sha }}